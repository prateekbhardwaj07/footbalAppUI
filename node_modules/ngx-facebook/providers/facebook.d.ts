import { AuthResponse } from '../models/auth-response';
import { InitParams } from '../models/init-params';
import { LoginOptions } from '../models/login-options';
import { LoginResponse } from '../models/login-response';
import { LoginStatus } from '../models/login-status';
import { UIParams } from '../models/ui-params';
import { UIResponse } from '../models/ui-response';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare type ApiMethod = 'get' | 'post' | 'delete';
/**
 * @shortdesc
 * Angular 2 service to inject to use Facebook's SDK
 * @description
 * You only need to inject this service in your application if you aren't using [`FacebookModule`](../facebook-module).
 * @usage
 * ```typescript
 * import { FacebookService, InitParams } from 'ngx-facebook-sdk';
 *
 * constructor(private fb: FacebookService) {
 *
 *   const params: InitParams = {
 *
 *   };
 *
 *   fb.init(params);
 *
 * }
 * ```
 */
export declare class FacebookService {
    /**
     * This method is used to initialize and setup the SDK.
     * @param params {InitParams} Initialization parameters
     * @returns {Promise<any>}
     */
    init(params: InitParams): Promise<any>;
    /**
     * This method lets you make calls to the Graph API
     * @usage
     * ```typescript
     * this.fb.api('somepath')
     *   .then(res => console.log(res))
     *   .catch(e => console.log(e));
     * ```
     * @param path {string} The Graph API endpoint path that you want to call.
     * @param [method=get] {string} The HTTP method that you want to use for the API request.
     * @param [params] {Object} An object consisting of any parameters that you want to pass into your Graph API call.
     * @returns {Promise<any>}
     */
    api(path: string, method?: ApiMethod, params?: any): Promise<any>;
    /**
     * This method is used to trigger different forms of Facebook created UI dialogs.
     * These dialogs include:
     * - Share dialog
     * - Login dialog
     * - Add page tab dialog
     * - Requests dialog
     * - Send dialog
     * - Payments dialog
     * - Go Live dialog
     * @param params {UIParams} A collection of parameters that control which dialog is loaded, and relevant settings.
     * @returns {Promise<UIResponse>}
     */
    ui(params: UIParams): Promise<UIResponse>;
    /**
     * This method allows you to determine if a user is logged in to Facebook and has authenticated your app.
     * @param [forceFreshResponse=false] {boolean} Force a fresh response.
     * @returns {Promise<LoginStatus>}
     */
    getLoginStatus(forceFreshResponse?: boolean): Promise<LoginStatus>;
    /**
     * Login the user
     * @usage
     * ```typescript
     * // login without options
     * this.fb.login()
     *   .then((response: LoginResponse) => console.log('Logged in', response))
     *   .catch(e => console.error('Error logging in'));
     *
     * // login with options
     * const options: LoginOptions = {
     *   scope: 'public_profile,user_friends,email,pages_show_list',
     *   return_scopes: true,
     *   enable_profile_selector: true
     * };
     * this.fb.login(options)
     *   .then(...)
     *   .catch(...);
     * ```
     * @param [options] {LoginOptions} Login options
     * @returns {Promise<LoginResponse>} returns a promise that resolves with [LoginResponse](../login-response) object, or rejects with an error
     */
    login(options?: LoginOptions): Promise<LoginResponse>;
    /**
     * Logout the user
     * @usage
     * ```typescript
     * this.fb.logout().then(() => console.log('Logged out!'));
     * ```
     * @returns {Promise<any>} returns a promise that resolves when the user is logged out
     */
    logout(): Promise<any>;
    /**
     * This synchronous function returns back the current authResponse.
     * @usage
     * ```typescript
     * import { AuthResponse, FacebookService } from 'ngx-facebook-sdk';
     *
     * ...
     *
     * const authResponse: AuthResponse = this.fb.getAuthResponse();
     * ```
     * @returns {AuthResponse} returns an [AuthResponse](../auth-response) object
     */
    getAuthResponse(): AuthResponse;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FacebookService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZWJvb2suZC50cyIsInNvdXJjZXMiOlsiZmFjZWJvb2suZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXV0aFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL2F1dGgtcmVzcG9uc2UnO1xuaW1wb3J0IHsgSW5pdFBhcmFtcyB9IGZyb20gJy4uL21vZGVscy9pbml0LXBhcmFtcyc7XG5pbXBvcnQgeyBMb2dpbk9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvbG9naW4tb3B0aW9ucyc7XG5pbXBvcnQgeyBMb2dpblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL2xvZ2luLXJlc3BvbnNlJztcbmltcG9ydCB7IExvZ2luU3RhdHVzIH0gZnJvbSAnLi4vbW9kZWxzL2xvZ2luLXN0YXR1cyc7XG5pbXBvcnQgeyBVSVBhcmFtcyB9IGZyb20gJy4uL21vZGVscy91aS1wYXJhbXMnO1xuaW1wb3J0IHsgVUlSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy91aS1yZXNwb25zZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBBcGlNZXRob2QgPSAnZ2V0JyB8ICdwb3N0JyB8ICdkZWxldGUnO1xuLyoqXG4gKiBAc2hvcnRkZXNjXG4gKiBBbmd1bGFyIDIgc2VydmljZSB0byBpbmplY3QgdG8gdXNlIEZhY2Vib29rJ3MgU0RLXG4gKiBAZGVzY3JpcHRpb25cbiAqIFlvdSBvbmx5IG5lZWQgdG8gaW5qZWN0IHRoaXMgc2VydmljZSBpbiB5b3VyIGFwcGxpY2F0aW9uIGlmIHlvdSBhcmVuJ3QgdXNpbmcgW2BGYWNlYm9va01vZHVsZWBdKC4uL2ZhY2Vib29rLW1vZHVsZSkuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZhY2Vib29rU2VydmljZSwgSW5pdFBhcmFtcyB9IGZyb20gJ25neC1mYWNlYm9vay1zZGsnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmI6IEZhY2Vib29rU2VydmljZSkge1xuICpcbiAqICAgY29uc3QgcGFyYW1zOiBJbml0UGFyYW1zID0ge1xuICpcbiAqICAgfTtcbiAqXG4gKiAgIGZiLmluaXQocGFyYW1zKTtcbiAqXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmFjZWJvb2tTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGluaXRpYWxpemUgYW5kIHNldHVwIHRoZSBTREsuXG4gICAgICogQHBhcmFtIHBhcmFtcyB7SW5pdFBhcmFtc30gSW5pdGlhbGl6YXRpb24gcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgaW5pdChwYXJhbXM6IEluaXRQYXJhbXMpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgbGV0cyB5b3UgbWFrZSBjYWxscyB0byB0aGUgR3JhcGggQVBJXG4gICAgICogQHVzYWdlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuZmIuYXBpKCdzb21lcGF0aCcpXG4gICAgICogICAudGhlbihyZXMgPT4gY29uc29sZS5sb2cocmVzKSlcbiAgICAgKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKGUpKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcGF0aCB7c3RyaW5nfSBUaGUgR3JhcGggQVBJIGVuZHBvaW50IHBhdGggdGhhdCB5b3Ugd2FudCB0byBjYWxsLlxuICAgICAqIEBwYXJhbSBbbWV0aG9kPWdldF0ge3N0cmluZ30gVGhlIEhUVFAgbWV0aG9kIHRoYXQgeW91IHdhbnQgdG8gdXNlIGZvciB0aGUgQVBJIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIFtwYXJhbXNdIHtPYmplY3R9IEFuIG9iamVjdCBjb25zaXN0aW5nIG9mIGFueSBwYXJhbWV0ZXJzIHRoYXQgeW91IHdhbnQgdG8gcGFzcyBpbnRvIHlvdXIgR3JhcGggQVBJIGNhbGwuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBhcGkocGF0aDogc3RyaW5nLCBtZXRob2Q/OiBBcGlNZXRob2QsIHBhcmFtcz86IGFueSk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRyaWdnZXIgZGlmZmVyZW50IGZvcm1zIG9mIEZhY2Vib29rIGNyZWF0ZWQgVUkgZGlhbG9ncy5cbiAgICAgKiBUaGVzZSBkaWFsb2dzIGluY2x1ZGU6XG4gICAgICogLSBTaGFyZSBkaWFsb2dcbiAgICAgKiAtIExvZ2luIGRpYWxvZ1xuICAgICAqIC0gQWRkIHBhZ2UgdGFiIGRpYWxvZ1xuICAgICAqIC0gUmVxdWVzdHMgZGlhbG9nXG4gICAgICogLSBTZW5kIGRpYWxvZ1xuICAgICAqIC0gUGF5bWVudHMgZGlhbG9nXG4gICAgICogLSBHbyBMaXZlIGRpYWxvZ1xuICAgICAqIEBwYXJhbSBwYXJhbXMge1VJUGFyYW1zfSBBIGNvbGxlY3Rpb24gb2YgcGFyYW1ldGVycyB0aGF0IGNvbnRyb2wgd2hpY2ggZGlhbG9nIGlzIGxvYWRlZCwgYW5kIHJlbGV2YW50IHNldHRpbmdzLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFVJUmVzcG9uc2U+fVxuICAgICAqL1xuICAgIHVpKHBhcmFtczogVUlQYXJhbXMpOiBQcm9taXNlPFVJUmVzcG9uc2U+O1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGFsbG93cyB5b3UgdG8gZGV0ZXJtaW5lIGlmIGEgdXNlciBpcyBsb2dnZWQgaW4gdG8gRmFjZWJvb2sgYW5kIGhhcyBhdXRoZW50aWNhdGVkIHlvdXIgYXBwLlxuICAgICAqIEBwYXJhbSBbZm9yY2VGcmVzaFJlc3BvbnNlPWZhbHNlXSB7Ym9vbGVhbn0gRm9yY2UgYSBmcmVzaCByZXNwb25zZS5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMb2dpblN0YXR1cz59XG4gICAgICovXG4gICAgZ2V0TG9naW5TdGF0dXMoZm9yY2VGcmVzaFJlc3BvbnNlPzogYm9vbGVhbik6IFByb21pc2U8TG9naW5TdGF0dXM+O1xuICAgIC8qKlxuICAgICAqIExvZ2luIHRoZSB1c2VyXG4gICAgICogQHVzYWdlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIC8vIGxvZ2luIHdpdGhvdXQgb3B0aW9uc1xuICAgICAqIHRoaXMuZmIubG9naW4oKVxuICAgICAqICAgLnRoZW4oKHJlc3BvbnNlOiBMb2dpblJlc3BvbnNlKSA9PiBjb25zb2xlLmxvZygnTG9nZ2VkIGluJywgcmVzcG9uc2UpKVxuICAgICAqICAgLmNhdGNoKGUgPT4gY29uc29sZS5lcnJvcignRXJyb3IgbG9nZ2luZyBpbicpKTtcbiAgICAgKlxuICAgICAqIC8vIGxvZ2luIHdpdGggb3B0aW9uc1xuICAgICAqIGNvbnN0IG9wdGlvbnM6IExvZ2luT3B0aW9ucyA9IHtcbiAgICAgKiAgIHNjb3BlOiAncHVibGljX3Byb2ZpbGUsdXNlcl9mcmllbmRzLGVtYWlsLHBhZ2VzX3Nob3dfbGlzdCcsXG4gICAgICogICByZXR1cm5fc2NvcGVzOiB0cnVlLFxuICAgICAqICAgZW5hYmxlX3Byb2ZpbGVfc2VsZWN0b3I6IHRydWVcbiAgICAgKiB9O1xuICAgICAqIHRoaXMuZmIubG9naW4ob3B0aW9ucylcbiAgICAgKiAgIC50aGVuKC4uLilcbiAgICAgKiAgIC5jYXRjaCguLi4pO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBbb3B0aW9uc10ge0xvZ2luT3B0aW9uc30gTG9naW4gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPExvZ2luUmVzcG9uc2U+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggW0xvZ2luUmVzcG9uc2VdKC4uL2xvZ2luLXJlc3BvbnNlKSBvYmplY3QsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvclxuICAgICAqL1xuICAgIGxvZ2luKG9wdGlvbnM/OiBMb2dpbk9wdGlvbnMpOiBQcm9taXNlPExvZ2luUmVzcG9uc2U+O1xuICAgIC8qKlxuICAgICAqIExvZ291dCB0aGUgdXNlclxuICAgICAqIEB1c2FnZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB0aGlzLmZiLmxvZ291dCgpLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0xvZ2dlZCBvdXQhJykpO1xuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgdXNlciBpcyBsb2dnZWQgb3V0XG4gICAgICovXG4gICAgbG9nb3V0KCk6IFByb21pc2U8YW55PjtcbiAgICAvKipcbiAgICAgKiBUaGlzIHN5bmNocm9ub3VzIGZ1bmN0aW9uIHJldHVybnMgYmFjayB0aGUgY3VycmVudCBhdXRoUmVzcG9uc2UuXG4gICAgICogQHVzYWdlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGltcG9ydCB7IEF1dGhSZXNwb25zZSwgRmFjZWJvb2tTZXJ2aWNlIH0gZnJvbSAnbmd4LWZhY2Vib29rLXNkayc7XG4gICAgICpcbiAgICAgKiAuLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IGF1dGhSZXNwb25zZTogQXV0aFJlc3BvbnNlID0gdGhpcy5mYi5nZXRBdXRoUmVzcG9uc2UoKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJucyB7QXV0aFJlc3BvbnNlfSByZXR1cm5zIGFuIFtBdXRoUmVzcG9uc2VdKC4uL2F1dGgtcmVzcG9uc2UpIG9iamVjdFxuICAgICAqL1xuICAgIGdldEF1dGhSZXNwb25zZSgpOiBBdXRoUmVzcG9uc2U7XG59XG4iXX0=